type User @model {
  id: ID!
  firstName: String!
  lastName: String!
  membershipType: String!
  email:String!
  dob: AWSDate
  height: String
  weightCategory: String
  boatPreference: AWSJSON
  side: AWSJSON
  sex: String
  status:Boolean
  deleted_at:AWSDate
  training: [AthleteAttendence] @connection(keyName: "byAthlete", fields: ["id"])
}

type BoatCategoryType @model
{
  id: ID!
  type: String!
  boat: [Boat]
  deleted_at:AWSDate

}

type Training @model
{
  id: ID!
  trainingDate: AWSDate!
  statut: Boolean
  athleteCategory:String
  trainingTime:String
  deleted_at:AWSDate
  athleteAttending: [AthleteAttendence] @connection(keyName: "byTraining", fields: ["id"])
}

type Club @model
{
  id: ID!
  name: String!
  address: String!
  postCode:String
  city:String!
  country:String!
  phone:String!
  email:String!
  deleted_at:AWSDate
}

type MembershipType @model
{
  id: ID!
  type: String!
  deleted_at:AWSDate
  boat: [BoatMembershipType] @connection(keyName: "byMembership", fields: ["id"])
}

type Boat @model {
  id: ID!
  name: String!
  ownership: String!
  weightCategory: String!
  sortOfBoat: String!
  note: String
  active: Boolean!
  deleted_at:AWSDate
  training: [BoatList] @connection(keyName: "byBoat", fields: ["id"])
  membershipType: [BoatMembershipType] @connection(keyName: "byBoat", fields: ["id"])
}

type BoatMembershipType
@model(queries: null)
@key(name: "byBoat", fields: ["boatId", "membershipId"])
@key(name: "byMembership", fields: ["membershipId", "boatId"]) {
  id: ID!
  boatId: ID!
  membershipId: ID!
  boat: Boat! @connection(fields: ["boatId"])
  membership: MembershipType! @connection(fields: ["membershipId"])
}

type AthleteAttendence
@model(queries: null)
@key(name: "byTraining", fields: ["trainingID", "athleteID"])
@key(name: "byAthlete", fields: ["athleteID", "trainingID"]) {
  id: ID!
  trainingID: ID!
  athleteID: ID!
  training: Training! @connection(fields: ["trainingID"])
  athlete: User! @connection(fields: ["athleteID"])
  attending: String
}

type BoatList
@model(queries: null)
@key(name: "byTraining", fields: ["trainingID", "athleteID"])
@key(name: "byAthlete", fields: ["athleteID", "trainingID"])
@key(name: "byBoat", fields: ["boatID", "trainingID"])
{
  id: ID!
  trainingID: ID!
  athleteID: ID!
  boatID: ID!
  training: Training! @connection(fields: ["trainingID"])
  boat: Boat! @connection(fields: ["boatID"])
  athlete: User! @connection(fields: ["athleteID"])
}

input CreateAthleteAttendenceInput {
  id: ID
  trainingID: ID!
  athleteID: ID!
  attending: String
}

input CreateBoatMemberShipTypeInput {
  id: ID
  boatId: ID!
  membershipId: ID!
}

type Mutation {
  batchAddAthleteAttendence(athleteAttendence: [CreateAthleteAttendenceInput]): [AthleteAttendence]
  batchAddBoatMembershipType(BoatMembershipType: [CreateBoatMemberShipTypeInput]): [BoatMembershipType]

}

type Query {
  batchGetAthleteAttendence(ids:[ID]): [User]
}
