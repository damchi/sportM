type User @model {
  id: ID!
  firstName: String!
  lastName: String!
  membershipType: String!
  email:String!
  dob: AWSDate
  height: String
  weightCategory: String
  boatPreference: AWSJSON
  side: AWSJSON
  sex: String
  status:Boolean
  training: [AthleteAttendence] @connection(keyName: "byAthlete", fields: ["id"])

}

type Boat @model {
  id: ID!
  name: String!
  ownership: String!
  membershipType: String!
  weightCategory: String!
  sortOfBoat: String!
  note: String
  active: Boolean!
  athleteAttending: [AthleteAttendence] @connection(keyName: "byBoat", fields: ["id"])

}

type Training @model
{
  id: ID!
  trainingDate: AWSDate!
  statut: Boolean
  athleteCategory:String
  trainingTime:String
  athleteAttending: [AthleteAttendence] @connection(keyName: "byTraining", fields: ["id"])
}

type AthleteAttendence
@model(queries: null)
@key(name: "byBoat", fields: ["boatID", "trainingID","athleteID"])
@key(name: "byTraining", fields: ["trainingID", "athleteID"])
@key(name: "byAthlete", fields: ["athleteID", "trainingID"]) {
  id: ID!
  trainingID: ID!
  athleteID: ID!
  boatID: ID!
  training: Training! @connection(fields: ["trainingID"])
  athlete: User! @connection(fields: ["athleteID"])
  boat: Boat @connection(fields: ["boatID"])
  attending: String
}

input CreateAthleteAttendenceInput {
  id: ID
  trainingID: ID!
  athleteID: ID!
  attending: String
}

type Mutation {
  batchAddAthleteAttendence(athleteAttendence: [CreateAthleteAttendenceInput]): [AthleteAttendence]
}
type Query {
  batchGetAthleteAttendence(userId:[ID]): [User]
}
